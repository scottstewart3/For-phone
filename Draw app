import tkinter as tk
from tkinter import colorchooser, filedialog

class DrawingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Advanced Drawing App")

        self.canvas = tk.Canvas(root, bg="white", width=800, height=600)
        self.canvas.pack(expand=tk.YES, fill=tk.BOTH)

        self.setup_menu()
        self.setup_tools()

        self.history = []
        self.history_index = -1

    def setup_menu(self):
        menu_bar = tk.Menu(self.root)
        self.root.config(menu=menu_bar)

        file_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Save", command=self.save_drawing)
        file_menu.add_command(label="Open", command=self.open_drawing)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.root.destroy)

        edit_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="Edit", menu=edit_menu)
        edit_menu.add_command(label="Clear Canvas", command=self.clear_canvas)
        edit_menu.add_command(label="Undo", command=self.undo, accelerator="Ctrl+Z")
        edit_menu.add_command(label="Redo", command=self.redo, accelerator="Ctrl+Y")
        self.root.bind("<Control-z>", lambda event: self.undo())
        self.root.bind("<Control-y>", lambda event: self.redo)

        color_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="Colors", menu=color_menu)
        color_menu.add_command(label="Choose Color", command=self.choose_color)

        pencil_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="Pencil", menu=pencil_menu)
        pencil_menu.add_command(label="Normal", command=lambda: self.set_pencil("normal"))
        pencil_menu.add_command(label="Dotted", command=lambda: self.set_pencil("dotted"))
        pencil_menu.add_command(label="Square", command=lambda: self.set_pencil("square"))
        pencil_menu.add_command(label="Circle", command=lambda: self.set_pencil("circle"))

        eraser_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="Eraser", menu=eraser_menu)
        eraser_menu.add_command(label="Small", command=lambda: self.set_eraser(5))
        eraser_menu.add_command(label="Medium", command=lambda: self.set_eraser(10))
        eraser_menu.add_command(label="Large", command=lambda: self.set_eraser(15))

        draw_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="Draw", menu=draw_menu)
        draw_menu.add_command(label="Line", command=self.draw_line)

    def setup_tools(self):
        self.current_tool = "pencil"
        self.color = "black"
        self.pencil_size = 2
        self.eraser_size = 5

        self.canvas.bind("<B1-Motion>", self.paint)

    def choose_color(self):
        color = colorchooser.askcolor()[1]
        if color:
            self.color = color

    def set_pencil(self, style):
        self.current_tool = "pencil"
        self.pencil_style = style

    def set_eraser(self, size):
        self.current_tool = "eraser"
        self.eraser_size = size

    def paint(self, event):
        if self.current_tool == "pencil":
            x1, y1 = (event.x - self.pencil_size), (event.y - self.pencil_size)
            x2, y2 = (event.x + self.pencil_size), (event.y + self.pencil_size)
            if self.pencil_style == "normal":
                self.canvas.create_oval(x1, y1, x2, y2, fill=self.color, width=2)
            elif self.pencil_style == "dotted":
                self.canvas.create_oval(x1, y1, x2, y2, fill=self.color, width=2, dash=(1, 2))
            elif self.pencil_style == "square":
                self.canvas.create_rectangle(x1, y1, x2, y2, fill=self.color, width=0)
            elif self.pencil_style == "circle":
                self.canvas.create_oval(x1, y1, x2, y2, fill=self.color, width=0)
        elif self.current_tool == "eraser":
            x1, y1 = (event.x - self.eraser_size), (event.y - self.eraser_size)
            x2, y2 = (event.x + self.eraser_size), (event.y + self.eraser_size)
            self.canvas.create_rectangle(x1, y1, x2, y2, fill="white", width=0)

        # Store the drawing state for undo/redo
        self.save_state()

    def clear_canvas(self):
        self.canvas.delete("all")
        self.save_state()

    def save_state(self):
        # Save the current canvas state for undo/redo
        self.history = self.history[:self.history_index + 1]
        self.history.append(self.canvas.postscript(colormode="color"))
        self.history_index += 1

    def undo(self):
        if self.history_index > 0:
            self.history_index -= 1
            self.canvas.delete("all")
            self.canvas.create_image(0, 0, anchor=tk.NW, image=tk.PhotoImage(data=self.history[self.history_index]))

    def redo(self):
        if self.history_index < len(self.history) - 1:
            self.history_index += 1
            self.canvas.delete("all")
            self.canvas.create_image(0, 0, anchor=tk.NW, image=tk.PhotoImage(data=self.history[self.history_index]))

    def save_drawing(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".ps", filetypes=[("PostScript files", "*.ps")])
        if file_path:
            self.canvas.postscript(file=file_path, colormode="color")

    def open_drawing(self):
        file_path = filedialog.askopenfilename(filetypes=[("PostScript files", "*.ps")])
        if file_path:
            self.canvas.delete("all")
            self.canvas.create_image(0, 0, anchor=tk.NW, image=tk.PhotoImage(file=file_path))
            self.save_state()

    def draw_line(self):
        self.current_tool = "line"
        self.canvas.bind("<Button-1>", self.start_line)

    def start_line(self, event):
        self.start_x = event.x
        self.start_y = event.y
        self.canvas.bind("<B1-Motion>", self.draw_temp_line)
        self.canvas.bind("<ButtonRelease-1>", self.draw_final_line)

    def draw_temp_line(self, event):
        self.canvas.delete("temp_line")
        self.canvas.create_line(self.start_x, self.start_y, event.x, event.y, fill=self.color, width=2, tags="temp_line")

    def draw_final_line(self, event):
        self.canvas.delete("temp_line")
        self.canvas.create_line(self.start_x, self.start_y, event.x, event.y, fill=self.color, width=2)
        self.save_state()

if __name__ == "__main__":
    root = tk.Tk()
    app = DrawingApp(root)
    root.mainloop()
